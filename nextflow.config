/*
nf-core-inspired generic Nextflow config
*/

manifest {
    name            = 'UKBB_OR'
    author          = 'emanuele-osimo,sidorov-si'
    homePage        = 'https://github.com/emosyne/2HH_nextflow/'
    description     = 'Test'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version         = '1.1'
}

//process.executor = 'local' // 'local' 'slurm' 'pbs' ...

// Global default params, used in configs
params {

    // References
    igenomes_base              = 's3://ngi-igenomes/igenomes'
    igenomes_ignore            = false

    // Run 
    outdir                     = './results'
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    email                      = 'eosimo@ic.ac.uk'
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    enable_conda               = false
    singularity_pull_docker_container = false

    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '500.GB'
    max_cpus                   = 2
    max_time                   = '240.h'
    
}

// Load base.config for resource allocation and executor setting
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    
    localmac {
        executor {
            name = 'local' // 'local' 'slurm' 
            memory = '200 GB'
            }
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        // genomes path
        env { geno_input_dir = "/Users/eosimo/NF_2HH/UKBB_ORs/input/BB_imputed_data" }
        
        // Check the defaults for all processes
        process {
            // cpus   = { check_max( 2    * task.attempt, 'cpus'   ) }
            // memory = { check_max( 100.GB * task.attempt, 'memory' ) }
            // time   = { check_max( 240.h  * task.attempt, 'time'   ) }

            withLabel:process_low {
                cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
                memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
            }

            withLabel:process_high {
                cpus   = { check_max( 2   * task.attempt, 'cpus'    ) }
                memory = { check_max( 64.GB * task.attempt, 'memory'  ) }
            }

            withLabel:process_high_memory {
                memory = { check_max( 100.GB * task.attempt, 'memory' ) }
            }
        }
    }


    lisa {
        
        process.clusterOptions = "--mail-type=FAIL,INVALID_DEPEND,REQUEUE,BEGIN,END"
        process.clusterOptions = "--mail-user=e.osimo@gmail.com"
        
        executor {
            name = 'slurm' // 'local' 'slurm' 
            queueSize = 15
            cpus   = { check_max( 2    * task.attempt, 'cpus'   ) }
            memory = { check_max( 12.GB * task.attempt, 'memory' ) }
            time   = { check_max( 1.h  * task.attempt, 'time'   ) }
            jobName= { "Nextflow" }
        }
        // process.executor = 'slurm' // 'local' 'slurm' 'pbs' ...
        singularity.enabled         = true
        singularity.autoMounts      = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        singularity.runOptions      = '-B $SINGULARITY_TMPDIR:/scratch,/project/osimoe,/home/osimoe'
        singularity.envWhitelist    = ['SINGULARITY_TMPDIR']
        singularity.cacheDir        = '/project/osimoe/.singularity/cache/'
        singularity.localCacheDir   = '/project/osimoe/.singularity/cache/'
        // singularity.engineOptions   = '--debug' 
        // workDir                     = '/project/osimoe/nextflow_workDir'
        
        // Check the defaults for all processes
        process {

            withLabel:process_low {
                cpus   =    { check_max( 1     * task.attempt, 'cpus'    ) }
                memory =    { check_max( 2.GB * task.attempt, 'memory'  ) }
                time =      { check_max( 4.m  * task.attempt, 'time'  ) }
            }

            withLabel:process_long {
                cpus   =    { check_max( 2     * task.attempt, 'cpus'    ) }
                memory =    { check_max( 24.GB * task.attempt, 'memory'  ) }
                time =      { check_max( 120.m  * task.attempt, 'time'  ) }
            }

            withLabel:process_mid {
                cpus   = { check_max( 24   * task.attempt, 'cpus'    ) }
                memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
                time =      { check_max( 9.m  * task.attempt, 'time'  ) }
            }

            withLabel:process_high {
                cpus   = { check_max( 2   * task.attempt, 'cpus'    ) }
                memory = { check_max( 24.GB * task.attempt, 'memory'  ) }
                time =      { check_max( 120.m  * task.attempt, 'time'  ) }
            }

            withLabel:process_high_memory {
                cpus   = { check_max( 8   * task.attempt, 'cpus'    ) }
                memory = { check_max( 128.GB * task.attempt, 'memory' ) }
                time =      { check_max( 24.h  * task.attempt, 'time'  ) }
            }
        }
    }
    
    
    
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')

timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}

report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}

trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}

dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.pdf"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}